Challenges

const item = thingsArray.map((element, key) =>{
    return `<p key={key}>{element}</p>`;
})

{item}




challenge 2:
function addElement(){
    thingsArray.push(`Things ${thingsArray.length + 1}`);
    return console.log(thingsArray);
}

<button onClick={addElement}>



challenge 3:
function greeting(name){
    const date = new Date();
    const hours = date.getHours();
    let timeOfDay;

    if(hours >= 4 && hours < 12){
        timeOfDay = "morning";
    }
    else if(hours >= 12 && hours < 17){
        timeOfDay = "afternoon";
    }
    else if(hours >= 17 && hours < 20){
        timeOfDay = "evening";
    }
    else{
        timeOfDay = "night";
    }

    return `Good ${timeOfDay}, ${name}`;
}

const {memeImage, setMemeImage} = useState(memeImage: "");




const [counter, setCounter] = useState(0);
function countUp(){
    setCounter(counter + 1);
}
function countDown(){
    setCounter(counter - 1);
}

function countUp(){
    setCounter((oldValue)=>{
        return oldValue + 1;
    });
}

function countUp(){
    setCounter(prevCount => prevCount + 1;
    });
}

onClick={countDown}
onClick={countUp}





const [isGoingOut, setIsGoingOut] = useState(true);
setIsGoingOut(prevState => !prevState)

{setIsGoingOut ? "Yes" : "No"}




adding to array
const [thingsArray, setThingsArray] = useState(thingsArray = ["Thing 1", "Thing 2"])
setThingsArray((prevState)=>{
    return [...prevState, `Thing ${prevState.length+1}`])
})






const [thingsArray, setThingsArray] = useState(["Thing 1", Thing 2"])

setThingsArray((prevState) => {
    return [...prevState, `Thing ${prevState.length+1}`];
})

const thingsElements = thingsArray.map((element,key) =>{
    return `<p>{element}</p>`
})




change icon name:
let starIcon = contact.isFavorite ? "star-filled.png" : "star-empty.png";
{starIcon}



update OBJECTS - need brackets
setContact((prevState)=>{
    return {
        ...prevState, 
        isFavorite: !prevState.isFavorite
    }
})



/* Challenge of course */
import React from "react";

export function Star({isFillable, handleClick}){

    return(
        <div>
            <img src={isFillable ? "star-filled.png" : "star-empty.png"} alt=""
            onClick={handleClick}/>
        </div>
    )
}

export default Star;

import Star
function toggleFavorite(){
    return ...
}

<Star isFilled = {contact.isFavorite} handleClick={toggleFavorite}/>







Component App
import Box

const [boxesArray, setBoxesArray] = useState(boxes)

function toggle(id){
    setBoxesArray(prevState =>{
        const newSquares = []
        for(let i = 0; i<prevState.length; i++){
            const currentSquare = prevState[i];
            if(currentSquare.id === id){
                const updatedSquare = {
                    ...currentSquare,
                    on: !currentSquare.on
                }
                newSquares.push(updatedSquare);

                //also can be written:
                newSquares.push({
                    ...currentSquare,
                    on: !currentSquare.on
                });
            }
            else{
                newSquares.push(currentSquare);
            }
        }
        return newSquares;
    })
}

function toggle(id){
    setBoxesArray(prevState =>{
        return prevState.map((element)=>{
            return element.id === id ? {...element, on: !element.on} : element;
        })
    })
}


const display = boxesArray.map((element, key) =>{
    return <Box key={key} on={element.on} handleClick={()=>toggle(element.id)} />
})

return(
    {display}
)



import {useState}
Component Box(props)

const styles = {
    backgroundColor: props.on ? "#222222" : "none"
}

return(
    <div onClick={props.handleClick} style={styles} className="box"><div>
)

App css
.box{
    display: inline-block
    width: 100px;
    height: 100px;
    border: 1px solid black;
    background-color: transparent;
}

onClick={()=>props.handleOnClick(props.id)} //the way to pass on the parameter




Conditional Rendering:
Component Joke(props){
    const [isShown, setIsShown] = useState(false)

    function toggle(){
        setIsShown(prevState => !prevState)
    }

    return(
        {isShown && <p>props.punchline</p>}
        <button onClick={toggle}>{isShown ? "Hide" : "Show"} Punchline</button>
    )
}



const [messages, setMessages] = useState(['a','b']);

return(
    {
        messages.length > 0 ? 
        <h1>You have {messages.length} unread {messages.length > 1 ? "messages" : "message"}</h1> :
        <h1>You're all caught up!</h1>}
)



Form:

const [formData, setFormData] = useState(
    {
        firstName: "", 
        lastName: "", 
        email: "", 
        comments: "", 
        isAlive: true,
        employment: "",
        favColor: ""
    })

function handleChange(event){
    const {name, value, type, checked} = event.target
    setFormData(prevState =>{
        return{
            ...prevState,
            [name]: type === "checkbox" ? checked : value
        }
    })
}

function handleSubmit(event){
    event.preventDefault()
    submitToApi(formData)
}

return(
    <form onSubmit={handleSubmit}>

        <input type="text" placeholder="First Name" onChange={handleChange}
            name="firstName" value={formData.firstName}/>
        
        <input type="text" placeholder="Last Name" onChange={handleChange}
            name="lastName" value={formData.lastName}/>
        
        <input type="email" placeholder="Email" onChange={handleChange}
        name="email" value={formData.email}/>
        
        <textarea name="comments" onChange={handleChange} value={formData.comments} />

        <label htmlFor="isAlive">Are you alive?</label>
        <input type="checkbox" id="isAlive" name="isAlive" checked={formData.isAlive} 
        onChange={handleChange}/>

        <input type="radio" id="Part-Time"  name="employment" value="Part-Time"
            checked={formData.employment === "Part-Time"} onChange={handleChange}/>
        <label htmlFor="Part-Time">Part-Time</label>

        <input type="radio" id="Full-Time"  name="employment" value="Full-Time" 
            checked={formData.employment === "Full-Time"} onChange={handleChange}/>
        <label htmlFor="Full-Time">Full-Time</label>

        <label htmlFor="favColor">Favorite Color?</label>
        <select id="favColor" value={formData.favColor} onChange={handleChange} 
                name="favColor">
            <option value="">-- Choose --</option>
            <option value="red">Red</option>
            <option value="blue">Blue</option>
        </select>

        <button>Submit</button>

    </form>
)



SignUp(){
    const [formData, setFormData] = useState(
        {
            email: "",
            password: "",
            confirm: "",
            newsletter: false
        }
    )

    function handleChange(event){
        const {name, value, type, checked} = event.target
        return setFormData(prevState => ({
            ..prevState,
            [name]: type === "checkbox" ? checked : value;
        }))
    }

    function handleSubmit(event){
        event.preventDefault()
        
        if(formData.confirm === formData.confirm){
            console.log("Successfully signed up");
        }else{
            console.log("passwords do not match");
            return;
        }

        formData.newsletter && console.log("Thanks for signing up for our newsletter");
    }

    return(
        <form onSubmit={handleSubmit} >

            <input type="email" placeholder="Email" name="email" value={formData.email} /> 

            <input type="password" placeholder="Password" name="password" value={formData.password} onChange={handleChange}/>

            <input type="password" placeholder="Confirm Password" name="password" value={formData.confirm} onChange={handleChange} />

            <label htmlFor="newsletter">I want to join the newsletter</label>
            <input type="checkbox" id="newsletter" name="newsletter" checked={formData.newsletter} onChange={handleChange}/>

            <button>Sign Up</button>

        </form>
    )
}




API 
//GET the data (fetch)
//Save the data to state

App(){
    const [theData, setData] = useState({});
    const [count, setCount] = useState(0);

    useEffect(() => {
        fetch(`https://swapi.dev/api/people/${count}`)
            .then(res => res.json())
            .then(data => setData(data))
    }, [count])

    return (
        <>
            <pre>{JSON.stringify(theData, null, 2)}</pre>

        </>
    )
}





App(){
    const [show, setShow] = useState(true)

    function toggle(){
        setShow(prevState => !prevState)
    }

    return(
        <div>
            <button onClick={toggle}> Toggle WindowTracker </button>
            {show && <WindowTracker />}
        </div>
    )
}

WindowTracker(){

    const [windowWidth, setWindowWidth] = useState(window.innerWidth)

    useEffect(()=>{
        function watchWidth(){
            setWindowWidth(window.innerWidth)
        }

        window.addEventListener("resize", watchWidth)

        return ()=>{
            window.removeEventListener("resize", watchWidth)
        }
    }, [])
    
    return(
        <div>
            <h1>Window width: {windowWidth}</h1>
        </div>
    )
}

/**
     * Challenge: complete and implement the deleteNote function
     * 
     * Hints: 
     * 1. What array method can be used to return a new
     *    array that has filtered out an item based 
     *    on a condition?
     * 2. Notice the parameters being based to the function
     *    and think about how both of those parameters
     *    can be passed in during the onClick event handler
     */
    
    function deleteNote(event, noteId) {
        event.stopPropagation()
        // Your code here
        setNotes(oldNotes => oldNotes.filter(note => note.id !== noteId))
    }

    <Sidebar            
        deleteNote={deleteNote}

export default function Sidebar(props) {
    <button 
        className="delete-btn"
        onClick={(event)=>props.deleteNode(event, note.id)}
    >